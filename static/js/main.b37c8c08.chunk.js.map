{"version":3,"sources":["components/Select/Select.js","components/Hits/Hit/Hit.js","components/LoadingBar/LoadingBar.js","api/api.js","components/Hits/Hits.js","components/StarWatchers/Watcher/Watcher.js","components/StarWatchers/StarWatchers.js","utilities/utilities.js","App.js","serviceWorker.js","index.js"],"names":["Select","props","value","optValues","onSelect","label","className","options","map","val","react_default","a","createElement","key","onChange","library","add","faStar","Hit","name","url","avatar","stars","language","description","creationDate","updateDate","type","owner","src","alt","href","Link","to","react_fontawesome_index_es","icon","size","color","substr","LoadingBar","style","width","percentage","isLastPage","headersLink","last","getRepos","_x","_x2","_getRepos","apply","this","arguments","_callee","date","page","res","pageCount","_args","regenerator_default","wrap","_context","prev","next","length","undefined","axios","get","concat","sent","parseLink","headers","link","parseInt","abrupt","hits","data","items","stop","getWatchers","_x3","_x4","_getWatchers","_callee2","repo","_args2","_context2","watchers","faChevronLeft","faChevronRight","Hits","state","loading","error","componentDidMount","pathname","_this","location","_this$props","setState","interval","setInterval","prevState","then","clearInterval","catch","err","message","match","changePageHandler","selected","history","push","prevProps","_this2","_this$props2","console","log","currentPage","hit","includes","Hits_Hit_Hit","id","login","html_url","avatar_url","stargazers_count","created_at","updated_at","dist_default","pageRangeDisplayed","marginPagesDisplayed","forcePage","onPageChange","disableInitialCallback","containerClassName","pageLinkClassName","pageClassName","previousClassName","nextClassName","previousLabel","nextLabel","activeClassName","components_LoadingBar_LoadingBar","React","Component","Watcher","StarWatchers","_this$props$match$par","params","endsWith","_this3","regEx","_this$props$match$par2","watcher","StarWatchers_Watcher_Watcher","output","getDateOfPastYears","years","now","Date","toISOString","App","dateSelectValue","changeLanguageHandler","e","target","changeDateHandler","components_Select_Select","BrowserRouter","basename","Switch","Route","path","component","render","components_Hits_Hits","Object","assign","Boolean","window","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b37c8c08.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Select = (props) => {\r\n    const { value, optValues, onSelect, label, className } = props;\r\n    const options = optValues.map(val => (\r\n        <option key={val} value={val}>{val}</option>\r\n    ));\r\n\r\n    if (label) {\r\n        return (\r\n            <label className='controls-wrapper__label'>\r\n                <span>{label}</span>\r\n                <select className={className} value={value} onChange={onSelect}>\r\n                    {options}\r\n                </select>\r\n            </label>\r\n        );\r\n    } else {\r\n        return (\r\n            <select className={className} value={value} onChange={onSelect}>\r\n                {options}\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Select;\r\n","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faStar)\r\n\r\nconst Hit = (props) => {\r\n    const { name, url, avatar, stars, language, description, creationDate, updateDate, type, owner } = props;\r\n    return (\r\n        <li className='hit'>\r\n            <div className='hit__header'>\r\n                <div className='hit__avatar'>\r\n                    <img src={avatar} alt={name}/>\r\n                </div>\r\n                <h2 className='hit__title'><a href={url}>{name}</a></h2>\r\n                <div className='hit__language'>\r\n                    <p>{language}</p>\r\n                </div>\r\n                <Link className='hit__stars' to={'/' + owner + '/' + name + '/starwatchers'}>\r\n                    <FontAwesomeIcon icon=\"star\" size='xs' color='#FBBC05' />\r\n                    <p>{stars}</p>\r\n                </Link>\r\n            </div>\r\n\r\n            <div className='hit__body'>\r\n            <h3>{type}</h3>\r\n                <p>{description}</p>\r\n                <p>Created at: {creationDate.substr(0, 10)}</p>\r\n                <p>Last update: {updateDate.substr(0, 10)}</p>            \r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Hit;\r\n","import React from 'react'\r\nimport './LoadingBar.css';\r\n\r\nconst LoadingBar = (props) => {\r\n  return (\r\n    <div className='bar'>\r\n      <div style={{width: props.percentage + '%'}} className='bar__filler'></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoadingBar;\r\n","import axios from 'axios';\r\nimport parseLink from 'parse-link-header';\r\n\r\nfunction isLastPage(headersLink) {\r\n    return headersLink.last ? false : true;\r\n}\r\n\r\nexport async function getRepos(language, date, page = 1) {\r\n    const res = await axios.get(`https://api.github.com/search/repositories?q=stars:>1+language:${language}+created:>${date}&sort=stars&order=desc&per_page=40&page=${page}`);\r\n    \r\n    let pageCount;\r\n    if (isLastPage(parseLink(res.headers.link))) {\r\n        pageCount = parseInt(parseLink(res.headers.link).prev.page, 10) + 1;\r\n    } else {\r\n        pageCount = parseInt(parseLink(res.headers.link).last.page, 10);\r\n    }\r\n\r\n    return {\r\n        hits: res.data.items,\r\n        pageCount\r\n    }\r\n}\r\n\r\nexport async function getWatchers(owner, repo, page = 1) {\r\n    const res = await axios.get(`https://api.github.com/repos/${owner}/${repo}/stargazers?per_page=40&page=${page}`);\r\n\r\n    let pageCount;\r\n    if (isLastPage(parseLink(res.headers.link))) {\r\n        pageCount = parseInt(parseLink(res.headers.link).prev.page, 10) + 1;\r\n    } else {\r\n        pageCount = parseInt(parseLink(res.headers.link).last.page, 10);\r\n    }\r\n\r\n    return {\r\n        watchers: res.data,\r\n        pageCount\r\n    }\r\n}","import React from 'react';\r\nimport Hit from './Hit/Hit';\r\nimport Paginate from 'react-paginate';\r\nimport LoadingBar from '../LoadingBar/LoadingBar';\r\n\r\nimport { getRepos } from '../../api/api';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronRight } from '@fortawesome/free-solid-svg-icons'\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faChevronLeft, faChevronRight);\r\n\r\nclass Hits extends React.Component {\r\n\r\n    state = {\r\n        hits: [],\r\n        pageCount: 0,\r\n        loading: false,\r\n        error: null,\r\n        percentage: 0\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const pathname = this.props.location.pathname;\r\n        const { language, date } = this.props;\r\n\r\n        this.setState({ loading: true, percentage: 0 });\r\n\r\n        const interval = setInterval(() => {\r\n            this.setState(prevState => ({\r\n                percentage: prevState.percentage + 10\r\n            }));\r\n        }, 100);\r\n\r\n        /* Get repos based on current path */\r\n        if (pathname === '/' || pathname === '/page1') {\r\n            getRepos(language, date)\r\n                .then(data => {\r\n                    clearInterval(interval);\r\n                    this.setState({\r\n                        hits: data.hits,\r\n                        pageCount: data.pageCount,\r\n                        percentage: 100,\r\n                        loading: false\r\n                    });\r\n                })\r\n                .catch(err => this.setState({ error: err.message }))\r\n        } else {\r\n            const regEx = /\\d+/;\r\n            const currentPage = pathname.match(regEx)[0];\r\n            getRepos(language, date, currentPage)\r\n                .then(data => {\r\n                    clearInterval(interval)\r\n                    this.setState({\r\n                        hits: data.hits,\r\n                        pageCount: data.pageCount,\r\n                        percentage: 100,\r\n                        loading: false\r\n                    });\r\n                })\r\n                .catch(err => this.setState({ error: err.message }))\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        /*Since the path or lang or date changed, get repos for the new page*/\r\n        if (prevProps.location.pathname !== this.props.location.pathname ||\r\n            prevProps.language !== this.props.language ||\r\n            prevProps.date !== this.props.date) {\r\n            let page;\r\n            const regEx = /\\d+/;\r\n            const { language, date } = this.props;\r\n\r\n            if (this.props.location.pathname === '/') {\r\n                page = 1;\r\n            } else {\r\n                page = this.props.location.pathname.match(regEx)[0]; //extract the number of current page from pathname\r\n            }\r\n\r\n            this.setState({ loading: true, percentage: 0 });\r\n\r\n            const interval = setInterval(() => {\r\n                this.setState(prevState => ({\r\n                    percentage: prevState.percentage + 10\r\n                }));\r\n            }, 100);\r\n\r\n            getRepos(language, date, page)\r\n                .then(data => {\r\n                    clearInterval(interval);\r\n                    this.setState({ hits: data.hits, percentage: 100, loading: false });\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    changePageHandler = (data) => {\r\n        const page = data.selected + 1; //data.selected is 0 based\r\n        this.props.history.push('/page' + page); //navigate programmatically through pages, changing the path\r\n    }\r\n\r\n    render() {\r\n        const { hits } = this.state;\r\n\r\n        /*Retrieve currentPage from pathaname not from state, because on reload the state is reset*/\r\n        const pathname = this.props.location.pathname;\r\n        const regex = /\\d+/;\r\n        let currentPage;\r\n        if (pathname === '/') {\r\n            currentPage = 1;\r\n        } else {\r\n            currentPage = parseInt(pathname.match(regex)[0], 10);\r\n        }\r\n\r\n        if (!this.state.loading && this.state.percentage >= 100) {\r\n            return (\r\n                <div>\r\n                    <ul className='hits'>\r\n                        {hits.map(hit => {\r\n                            /*Remove dummy repo named eeeeee from the results*/\r\n                            if (hit.name.includes('eeeeeee')) {\r\n                                return null;\r\n                            } else {\r\n                                return (\r\n                                    <Hit\r\n                                        key={hit.id}\r\n                                        owner={hit.owner.login}\r\n                                        name={hit.name}\r\n                                        url={hit.html_url}\r\n                                        avatar={hit.owner.avatar_url}\r\n                                        stars={hit.stargazers_count}\r\n                                        language={hit.language}\r\n                                        description={hit.description}\r\n                                        creationDate={hit.created_at}\r\n                                        updateDate={hit.updated_at}\r\n                                        type={hit.owner.type} />\r\n                                );\r\n                            }\r\n                        })}\r\n                    </ul>\r\n\r\n                    <Paginate\r\n                        pageCount={this.state.pageCount}\r\n                        pageRangeDisplayed={3}\r\n                        marginPagesDisplayed={2}\r\n                        forcePage={currentPage - 1}\r\n                        onPageChange={this.changePageHandler}\r\n                        disableInitialCallback\r\n                        containerClassName='paginate-wrapper'\r\n                        pageLinkClassName='paginate-link'\r\n                        pageClassName='paginate-li'\r\n                        previousClassName='paginate-li'\r\n                        nextClassName='paginate-li'\r\n                        previousLabel={<FontAwesomeIcon icon='chevron-left' />}\r\n                        nextLabel={<FontAwesomeIcon icon='chevron-right' />}\r\n                        activeClassName='active-link'\r\n                    />\r\n                </div>\r\n            );\r\n        } else {\r\n            if (!this.state.error) {\r\n                return <LoadingBar percentage={this.state.percentage} />\r\n            } else {\r\n                return <h1>{this.state.error}</h1>\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Hits;\r\n","import React from 'react';\r\n\r\nconst Watcher = (props) => {\r\n    const { avatar, name, url} = props;\r\n    return (\r\n        <li className='watcher'>\r\n            <div className='watcher__avatar'>\r\n                <img src={avatar} alt={name}/>\r\n            </div>\r\n            <h3><a href={url} >{name}</a></h3>\r\n        </li>\r\n    )\r\n}\r\n          \r\nexport default Watcher;\r\n","import React, { Component } from 'react';\r\nimport Watcher from './Watcher/Watcher';\r\n\r\nimport Paginate from 'react-paginate';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronRight } from '@fortawesome/free-solid-svg-icons'\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './StarWatchers.css';\r\nimport { getWatchers } from '../../api/api';\r\n\r\nlibrary.add(faChevronLeft, faChevronRight);\r\n\r\nclass StarWatchers extends Component {\r\n    state = {\r\n        watchers: [],\r\n        pageCount: 0,\r\n        error: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { owner, repo } = this.props.match.params;\r\n        const pathname = this.props.location.pathname;\r\n        if (pathname.endsWith('/starwatchers') || pathname.endsWith('/starwatchers/1')) {\r\n            getWatchers(owner, repo)\r\n                .then(data => {\r\n                    this.setState({\r\n                        watchers: data.watchers,\r\n                        pageCount: data.pageCount\r\n                    });\r\n                })\r\n                .catch(err => this.setState({ error: err.message }))\r\n        } else {\r\n            const regEx = /\\d+/;\r\n            const currentPage = pathname.match(regEx)[0];\r\n\r\n            getWatchers(owner, repo, currentPage)\r\n                .then(data => {\r\n                    this.setState({\r\n                        watchers: data.watchers,\r\n                        pageCount: data.pageCount\r\n                    });\r\n                })\r\n                .catch(err => this.setState({ error: err.message }))\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.location.pathname !== this.props.location.pathname) {\r\n            let page;\r\n            const regEx = /\\d+/;\r\n            const { owner, repo } = this.props.match.params;\r\n\r\n            if (!this.props.location.pathname.match(regEx)) {\r\n                page = 1;\r\n            } else {\r\n                page = this.props.location.pathname.match(regEx)[0]; //extract the number of current page from pathname\r\n            }\r\n\r\n            getWatchers(owner, repo, page)\r\n                .then(data => {\r\n                    this.setState({ watchers: data.watchers });\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    changePageHandler = (data) => {\r\n        const page = data.selected + 1; //data.selected is 0 based\r\n        /* If last character is forw slash. Avoid a bad formatted url with two // */\r\n        if (this.props.match.url[this.props.match.url.length - 1] === '/') {\r\n            console.log(this.props.match.url)\r\n            this.props.history.push(this.props.match.url + page);\r\n        } else {\r\n            this.props.history.push(this.props.match.url + '/' + page); //will be root/owner/repo/starwatchers/1 or 4 or n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const watchers = this.state.watchers.map(watcher => {\r\n            return <Watcher\r\n                key={watcher.id}\r\n                avatar={watcher.avatar_url}\r\n                name={watcher.login}\r\n                url={watcher.html_url} />\r\n        });\r\n\r\n        let output = <div>\r\n            <ul className='watchers'>\r\n                {watchers}\r\n            </ul>\r\n\r\n            <Paginate\r\n                pageCount={this.state.pageCount}\r\n                pageRangeDisplayed={3}\r\n                marginPagesDisplayed={2}\r\n                onPageChange={this.changePageHandler}\r\n                disableInitialCallback\r\n                containerClassName='paginate-wrapper'\r\n                pageLinkClassName='paginate-link'\r\n                pageClassName='paginate-li'\r\n                previousClassName='paginate-li'\r\n                nextClassName='paginate-li'\r\n                previousLabel={<FontAwesomeIcon icon='chevron-left' />}\r\n                nextLabel={<FontAwesomeIcon icon='chevron-right' />}\r\n                activeClassName='active-link'\r\n            />\r\n        </div>\r\n\r\n        if(this.state.error) {\r\n            output = <h1>{this.state.error}</h1>\r\n        }\r\n\r\n        return output;\r\n    }\r\n}\r\n\r\nexport default StarWatchers;\r\n","export const getDateOfPastYears = (years) => {\r\n    const now = Date.now();\r\n    const msOfYears = (365 * years) * 86400000;\r\n    const pastDate = new Date(now - msOfYears);\r\n    const isoDate = pastDate.toISOString().substr(0, 10); //github api requires iso formatted date\r\n    return isoDate;\r\n};\r\n","import React, { Component } from 'react';\nimport Select from './components/Select/Select';\nimport Hits from './components/Hits/Hits';\nimport StarWatchers from './components/StarWatchers/StarWatchers';\n\nimport { getDateOfPastYears } from './utilities/utilities';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    language: 'javascript',\n    date: '2011-01-01',\n    dateSelectValue: 'all'\n  }\n\n  changeLanguageHandler = (e) => {\n    this.setState({ language: e.target.value });\n  }\n\n  changeDateHandler = (e) => {\n    this.setState({ dateSelectValue: e.target.value });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.dateSelectValue !== this.state.dateSelectValue) {\n      switch (this.state.dateSelectValue) {\n        case 'all':\n          this.setState({ date: '2011-01-01' });\n          break;\n        case 'last 5 years':\n          this.setState({\n            date: getDateOfPastYears(5)\n          });\n          break;\n        case 'last year':\n          this.setState({\n            date: getDateOfPastYears(1)\n          });\n          break;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className='header'>\n          <h1 className='header__title'>Most popular github repos</h1>\n        </header>\n\n        <div className='controls-wrapper'>\n          <Select\n            className='controls-wrapper__select'\n            label='Search'\n            optValues={['all', 'javascript', 'java', 'python', 'ruby']}\n            onSelect={this.changeLanguageHandler}\n            value={this.state.language} />\n          <Select\n            className='controls-wrapper__select'\n            label='for'\n            optValues={['all', 'last year', 'last 5 years']}\n            onSelect={this.changeDateHandler}\n            value={this.dateSelectValue} />\n        </div>\n\n        <BrowserRouter basename='/github-best-repos/'>\n          <Switch>\n            <Route path='/:owner/:repo/starwatchers' component={StarWatchers} />\n            <Route path='/' render={(props) => (\n              <Hits language={this.state.language} date={this.state.date} {...props} />\n            )} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}